
UART_DMA_IDLE_LINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e84  08003e84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e84  08003e84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e84  08003e84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000168  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000174  20000174  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b00a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a4d  00000000  00000000  0002b046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  0002ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d0  00000000  00000000  0002d200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f832  00000000  00000000  0002d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa5f  00000000  00000000  0004d102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf1da  00000000  00000000  00057b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116d3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cf4  00000000  00000000  00116d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e34 	.word	0x08003e34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003e34 	.word	0x08003e34

080001d4 <HAL_UARTEx_RxEventCallback>:
uint8_t Main_buf[Main_buf_size];



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a0c      	ldr	r2, [pc, #48]	; (8000218 <HAL_UARTEx_RxEventCallback+0x44>)
 80001e6:	4293      	cmp	r3, r2
 80001e8:	d105      	bne.n	80001f6 <HAL_UARTEx_RxEventCallback+0x22>
	{
		memcpy(Main_buf,Rx_buf,Size);
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	461a      	mov	r2, r3
 80001ee:	490b      	ldr	r1, [pc, #44]	; (800021c <HAL_UARTEx_RxEventCallback+0x48>)
 80001f0:	480b      	ldr	r0, [pc, #44]	; (8000220 <HAL_UARTEx_RxEventCallback+0x4c>)
 80001f2:	f003 fe09 	bl	8003e08 <memcpy>
	}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_buf, RX_buf_size);
 80001f6:	2219      	movs	r2, #25
 80001f8:	4908      	ldr	r1, [pc, #32]	; (800021c <HAL_UARTEx_RxEventCallback+0x48>)
 80001fa:	480a      	ldr	r0, [pc, #40]	; (8000224 <HAL_UARTEx_RxEventCallback+0x50>)
 80001fc:	f003 fd84 	bl	8003d08 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8000200:	4b09      	ldr	r3, [pc, #36]	; (8000228 <HAL_UARTEx_RxEventCallback+0x54>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	4b08      	ldr	r3, [pc, #32]	; (8000228 <HAL_UARTEx_RxEventCallback+0x54>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f022 0204 	bic.w	r2, r2, #4
 800020e:	601a      	str	r2, [r3, #0]
}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40004400 	.word	0x40004400
 800021c:	200000f0 	.word	0x200000f0
 8000220:	2000010c 	.word	0x2000010c
 8000224:	20000028 	.word	0x20000028
 8000228:	200000ac 	.word	0x200000ac

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000230:	f000 fa46 	bl	80006c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000234:	f000 f81a 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000238:	f000 f8c4 	bl	80003c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800023c:	f000 f8a4 	bl	8000388 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000240:	f000 f872 	bl	8000328 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_buf, RX_buf_size);
 8000244:	2219      	movs	r2, #25
 8000246:	4906      	ldr	r1, [pc, #24]	; (8000260 <main+0x34>)
 8000248:	4806      	ldr	r0, [pc, #24]	; (8000264 <main+0x38>)
 800024a:	f003 fd5d 	bl	8003d08 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <main+0x3c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <main+0x3c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f022 0204 	bic.w	r2, r2, #4
 800025c:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025e:	e7fe      	b.n	800025e <main+0x32>
 8000260:	200000f0 	.word	0x200000f0
 8000264:	20000028 	.word	0x20000028
 8000268:	200000ac 	.word	0x200000ac

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b0a6      	sub	sp, #152	; 0x98
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f003 fdd2 	bl	8003e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2258      	movs	r2, #88	; 0x58
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f003 fdc4 	bl	8003e24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029c:	2302      	movs	r3, #2
 800029e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a0:	2301      	movs	r3, #1
 80002a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a4:	2310      	movs	r3, #16
 80002a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002aa:	2302      	movs	r3, #2
 80002ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 ff3c 	bl	8001148 <HAL_RCC_OscConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002d6:	f000 f8db 	bl	8000490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	230f      	movs	r3, #15
 80002dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002de:	2302      	movs	r3, #2
 80002e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002f4:	2102      	movs	r1, #2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 ff7a 	bl	80021f0 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000302:	f000 f8c5 	bl	8000490 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000306:	2302      	movs	r3, #2
 8000308:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800030a:	2300      	movs	r3, #0
 800030c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f002 f9a3 	bl	800265c <HAL_RCCEx_PeriphCLKConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800031c:	f000 f8b8 	bl	8000490 <Error_Handler>
  }
}
 8000320:	bf00      	nop
 8000322:	3798      	adds	r7, #152	; 0x98
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <MX_USART2_UART_Init+0x58>)
 800032e:	4a15      	ldr	r2, [pc, #84]	; (8000384 <MX_USART2_UART_Init+0x5c>)
 8000330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <MX_USART2_UART_Init+0x58>)
 8000334:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_USART2_UART_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_USART2_UART_Init+0x58>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_USART2_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_USART2_UART_Init+0x58>)
 800034e:	220c      	movs	r2, #12
 8000350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_USART2_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_USART2_UART_Init+0x58>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_USART2_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_USART2_UART_Init+0x58>)
 8000366:	2200      	movs	r2, #0
 8000368:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_USART2_UART_Init+0x58>)
 800036c:	f002 fb94 	bl	8002a98 <HAL_UART_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000376:	f000 f88b 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000028 	.word	0x20000028
 8000384:	40004400 	.word	0x40004400

08000388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_DMA_Init+0x38>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <MX_DMA_Init+0x38>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_DMA_Init+0x38>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2100      	movs	r1, #0
 80003aa:	2010      	movs	r0, #16
 80003ac:	f000 fac9 	bl	8000942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003b0:	2010      	movs	r0, #16
 80003b2:	f000 fae2 	bl	800097a <HAL_NVIC_EnableIRQ>

}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08a      	sub	sp, #40	; 0x28
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <MX_GPIO_Init+0xc4>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a2a      	ldr	r2, [pc, #168]	; (8000488 <MX_GPIO_Init+0xc4>)
 80003e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <MX_GPIO_Init+0xc4>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003ee:	613b      	str	r3, [r7, #16]
 80003f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003f2:	4b25      	ldr	r3, [pc, #148]	; (8000488 <MX_GPIO_Init+0xc4>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a24      	ldr	r2, [pc, #144]	; (8000488 <MX_GPIO_Init+0xc4>)
 80003f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b22      	ldr	r3, [pc, #136]	; (8000488 <MX_GPIO_Init+0xc4>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <MX_GPIO_Init+0xc4>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a1e      	ldr	r2, [pc, #120]	; (8000488 <MX_GPIO_Init+0xc4>)
 8000410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <MX_GPIO_Init+0xc4>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000422:	4b19      	ldr	r3, [pc, #100]	; (8000488 <MX_GPIO_Init+0xc4>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a18      	ldr	r2, [pc, #96]	; (8000488 <MX_GPIO_Init+0xc4>)
 8000428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b16      	ldr	r3, [pc, #88]	; (8000488 <MX_GPIO_Init+0xc4>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000442:	f000 fe69 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800044c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000456:	f107 0314 	add.w	r3, r7, #20
 800045a:	4619      	mov	r1, r3
 800045c:	480b      	ldr	r0, [pc, #44]	; (800048c <MX_GPIO_Init+0xc8>)
 800045e:	f000 fcd1 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000462:	2320      	movs	r3, #32
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2301      	movs	r3, #1
 8000468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	2300      	movs	r3, #0
 8000470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000472:	f107 0314 	add.w	r3, r7, #20
 8000476:	4619      	mov	r1, r3
 8000478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047c:	f000 fcc2 	bl	8000e04 <HAL_GPIO_Init>

}
 8000480:	bf00      	nop
 8000482:	3728      	adds	r7, #40	; 0x28
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000
 800048c:	48000800 	.word	0x48000800

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000498:	e7fe      	b.n	8000498 <Error_Handler+0x8>
	...

0800049c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <HAL_MspInit+0x44>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <HAL_MspInit+0x44>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <HAL_MspInit+0x44>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <HAL_MspInit+0x44>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <HAL_MspInit+0x44>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <HAL_MspInit+0x44>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004d2:	2007      	movs	r0, #7
 80004d4:	f000 fa2a 	bl	800092c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a2e      	ldr	r2, [pc, #184]	; (80005bc <HAL_UART_MspInit+0xd8>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d156      	bne.n	80005b4 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000506:	4b2e      	ldr	r3, [pc, #184]	; (80005c0 <HAL_UART_MspInit+0xdc>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a2d      	ldr	r2, [pc, #180]	; (80005c0 <HAL_UART_MspInit+0xdc>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <HAL_UART_MspInit+0xdc>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <HAL_UART_MspInit+0xdc>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <HAL_UART_MspInit+0xdc>)
 8000524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <HAL_UART_MspInit+0xdc>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000536:	230c      	movs	r3, #12
 8000538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2300      	movs	r3, #0
 8000544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000546:	2307      	movs	r3, #7
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f000 fc56 	bl	8000e04 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <HAL_UART_MspInit+0xe0>)
 800055a:	4a1b      	ldr	r2, [pc, #108]	; (80005c8 <HAL_UART_MspInit+0xe4>)
 800055c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800055e:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <HAL_UART_MspInit+0xe0>)
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <HAL_UART_MspInit+0xe0>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <HAL_UART_MspInit+0xe0>)
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <HAL_UART_MspInit+0xe0>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <HAL_UART_MspInit+0xe0>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <HAL_UART_MspInit+0xe0>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <HAL_UART_MspInit+0xe0>)
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000588:	480e      	ldr	r0, [pc, #56]	; (80005c4 <HAL_UART_MspInit+0xe0>)
 800058a:	f000 fa10 	bl	80009ae <HAL_DMA_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000594:	f7ff ff7c 	bl	8000490 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <HAL_UART_MspInit+0xe0>)
 800059c:	671a      	str	r2, [r3, #112]	; 0x70
 800059e:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <HAL_UART_MspInit+0xe0>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2100      	movs	r1, #0
 80005a8:	2026      	movs	r0, #38	; 0x26
 80005aa:	f000 f9ca 	bl	8000942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005ae:	2026      	movs	r0, #38	; 0x26
 80005b0:	f000 f9e3 	bl	800097a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	; 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40004400 	.word	0x40004400
 80005c0:	40021000 	.word	0x40021000
 80005c4:	200000ac 	.word	0x200000ac
 80005c8:	4002006c 	.word	0x4002006c

080005cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <NMI_Handler+0x4>

080005d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <HardFault_Handler+0x4>

080005d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <MemManage_Handler+0x4>

080005de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <BusFault_Handler+0x4>

080005e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <UsageFault_Handler+0x4>

080005ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000618:	f000 f898 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <DMA1_Channel6_IRQHandler+0x10>)
 8000626:	f000 fadf 	bl	8000be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200000ac 	.word	0x200000ac

08000634 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <USART2_IRQHandler+0x10>)
 800063a:	f002 fa7b 	bl	8002b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000028 	.word	0x20000028

08000648 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <SystemInit+0x20>)
 800064e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <SystemInit+0x20>)
 8000654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800066c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490e      	ldr	r1, [pc, #56]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0b      	ldr	r4, [pc, #44]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000696:	f7ff ffd7 	bl	8000648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800069a:	f003 fb91 	bl	8003dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800069e:	f7ff fdc5 	bl	800022c <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b0:	08003e8c 	.word	0x08003e8c
  ldr r2, =_sbss
 80006b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b8:	20000174 	.word	0x20000174

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_Init+0x28>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_Init+0x28>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f92b 	bl	800092c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f808 	bl	80006ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006dc:	f7ff fede 	bl	800049c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40022000 	.word	0x40022000

080006ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_InitTick+0x54>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x58>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	fbb3 f3f1 	udiv	r3, r3, r1
 8000706:	fbb2 f3f3 	udiv	r3, r2, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f943 	bl	8000996 <HAL_SYSTICK_Config>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	e00e      	b.n	8000738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	d80a      	bhi.n	8000736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000720:	2200      	movs	r2, #0
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	f04f 30ff 	mov.w	r0, #4294967295
 8000728:	f000 f90b 	bl	8000942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_InitTick+0x5c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000000 	.word	0x20000000
 8000744:	20000008 	.word	0x20000008
 8000748:	20000004 	.word	0x20000004

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_IncTick+0x20>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_IncTick+0x24>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4413      	add	r3, r2
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_IncTick+0x24>)
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008
 8000770:	20000170 	.word	0x20000170

08000774 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;  
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <HAL_GetTick+0x14>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000170 	.word	0x20000170

0800078c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	60d3      	str	r3, [r2, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <__NVIC_GetPriorityGrouping+0x18>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	f003 0307 	and.w	r3, r3, #7
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db0b      	blt.n	800081a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	f003 021f 	and.w	r2, r3, #31
 8000808:	4907      	ldr	r1, [pc, #28]	; (8000828 <__NVIC_EnableIRQ+0x38>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	095b      	lsrs	r3, r3, #5
 8000810:	2001      	movs	r0, #1
 8000812:	fa00 f202 	lsl.w	r2, r0, r2
 8000816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000e100 	.word	0xe000e100

0800082c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	db0a      	blt.n	8000856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	b2da      	uxtb	r2, r3
 8000844:	490c      	ldr	r1, [pc, #48]	; (8000878 <__NVIC_SetPriority+0x4c>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	0112      	lsls	r2, r2, #4
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	440b      	add	r3, r1
 8000850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000854:	e00a      	b.n	800086c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4908      	ldr	r1, [pc, #32]	; (800087c <__NVIC_SetPriority+0x50>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	3b04      	subs	r3, #4
 8000864:	0112      	lsls	r2, r2, #4
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	440b      	add	r3, r1
 800086a:	761a      	strb	r2, [r3, #24]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000e100 	.word	0xe000e100
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000880:	b480      	push	{r7}
 8000882:	b089      	sub	sp, #36	; 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	f1c3 0307 	rsb	r3, r3, #7
 800089a:	2b04      	cmp	r3, #4
 800089c:	bf28      	it	cs
 800089e:	2304      	movcs	r3, #4
 80008a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3304      	adds	r3, #4
 80008a6:	2b06      	cmp	r3, #6
 80008a8:	d902      	bls.n	80008b0 <NVIC_EncodePriority+0x30>
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3b03      	subs	r3, #3
 80008ae:	e000      	b.n	80008b2 <NVIC_EncodePriority+0x32>
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	f04f 32ff 	mov.w	r2, #4294967295
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43da      	mvns	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	401a      	ands	r2, r3
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c8:	f04f 31ff 	mov.w	r1, #4294967295
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	43d9      	mvns	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	4313      	orrs	r3, r2
         );
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3724      	adds	r7, #36	; 0x24
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f8:	d301      	bcc.n	80008fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00f      	b.n	800091e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <SysTick_Config+0x40>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000906:	210f      	movs	r1, #15
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f7ff ff8e 	bl	800082c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <SysTick_Config+0x40>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <SysTick_Config+0x40>)
 8000918:	2207      	movs	r2, #7
 800091a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	e000e010 	.word	0xe000e010

0800092c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff29 	bl	800078c <__NVIC_SetPriorityGrouping>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000954:	f7ff ff3e 	bl	80007d4 <__NVIC_GetPriorityGrouping>
 8000958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	6978      	ldr	r0, [r7, #20]
 8000960:	f7ff ff8e 	bl	8000880 <NVIC_EncodePriority>
 8000964:	4602      	mov	r2, r0
 8000966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff5d 	bl	800082c <__NVIC_SetPriority>
}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff31 	bl	80007f0 <__NVIC_EnableIRQ>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff ffa2 	bl	80008e8 <SysTick_Config>
 80009a4:	4603      	mov	r3, r0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b084      	sub	sp, #16
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e037      	b.n	8000a34 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2202      	movs	r2, #2
 80009c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80009de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f000 f9b8 	bl	8000d8c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2201      	movs	r2, #1
 8000a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
}  
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d101      	bne.n	8000a5c <HAL_DMA_Start_IT+0x20>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e04a      	b.n	8000af2 <HAL_DMA_Start_IT+0xb6>
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d13a      	bne.n	8000ae4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2202      	movs	r2, #2
 8000a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f022 0201 	bic.w	r2, r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f000 f94b 	bl	8000d2e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d008      	beq.n	8000ab2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f042 020e 	orr.w	r2, r2, #14
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e00f      	b.n	8000ad2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f042 020a 	orr.w	r2, r2, #10
 8000ac0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f022 0204 	bic.w	r2, r2, #4
 8000ad0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f042 0201 	orr.w	r2, r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	e005      	b.n	8000af0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000aec:	2302      	movs	r3, #2
 8000aee:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d008      	beq.n	8000b1e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2204      	movs	r2, #4
 8000b10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e020      	b.n	8000b60 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f022 020e 	bic.w	r2, r2, #14
 8000b2c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 0201 	bic.w	r2, r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b46:	2101      	movs	r1, #1
 8000b48:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2201      	movs	r2, #1
 8000b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d005      	beq.n	8000b8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2204      	movs	r2, #4
 8000b86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	e027      	b.n	8000bde <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 020e 	bic.w	r2, r2, #14
 8000b9c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bbc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	4798      	blx	r3
    } 
  }
  return status;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	2204      	movs	r2, #4
 8000c06:	409a      	lsls	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d024      	beq.n	8000c5a <HAL_DMA_IRQHandler+0x72>
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d01f      	beq.n	8000c5a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0320 	and.w	r3, r3, #32
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d107      	bne.n	8000c38 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 0204 	bic.w	r2, r2, #4
 8000c36:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c40:	2104      	movs	r1, #4
 8000c42:	fa01 f202 	lsl.w	r2, r1, r2
 8000c46:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d06a      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c58:	e065      	b.n	8000d26 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	2202      	movs	r2, #2
 8000c60:	409a      	lsls	r2, r3
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4013      	ands	r3, r2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d02c      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0xdc>
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d027      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0320 	and.w	r3, r3, #32
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10b      	bne.n	8000c9a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f022 020a 	bic.w	r2, r2, #10
 8000c90:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d035      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000cc2:	e030      	b.n	8000d26 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	2208      	movs	r2, #8
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d028      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13e>
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d023      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 020e 	bic.w	r2, r2, #14
 8000cec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d004      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	4798      	blx	r3
    }
  }
}  
 8000d24:	e7ff      	b.n	8000d26 <HAL_DMA_IRQHandler+0x13e>
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b085      	sub	sp, #20
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d44:	2101      	movs	r1, #1
 8000d46:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b10      	cmp	r3, #16
 8000d5a:	d108      	bne.n	8000d6e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d6c:	e007      	b.n	8000d7e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	60da      	str	r2, [r3, #12]
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <DMA_CalcBaseAndBitshift+0x60>)
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d80f      	bhi.n	8000dc0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <DMA_CalcBaseAndBitshift+0x64>)
 8000da8:	4413      	add	r3, r2
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <DMA_CalcBaseAndBitshift+0x68>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	009a      	lsls	r2, r3, #2
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <DMA_CalcBaseAndBitshift+0x6c>)
 8000dbc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000dbe:	e00e      	b.n	8000dde <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <DMA_CalcBaseAndBitshift+0x70>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <DMA_CalcBaseAndBitshift+0x68>)
 8000dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	009a      	lsls	r2, r3, #2
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <DMA_CalcBaseAndBitshift+0x74>)
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40020407 	.word	0x40020407
 8000df0:	bffdfff8 	.word	0xbffdfff8
 8000df4:	cccccccd 	.word	0xcccccccd
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	bffdfbf8 	.word	0xbffdfbf8
 8000e00:	40020400 	.word	0x40020400

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e12:	e160      	b.n	80010d6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 8152 	beq.w	80010d0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d005      	beq.n	8000e44 <HAL_GPIO_Init+0x40>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d130      	bne.n	8000ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	f003 0201 	and.w	r2, r3, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d017      	beq.n	8000ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d123      	bne.n	8000f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	691a      	ldr	r2, [r3, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	6939      	ldr	r1, [r7, #16]
 8000f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0203 	and.w	r2, r3, #3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 80ac 	beq.w	80010d0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f78:	4b5e      	ldr	r3, [pc, #376]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a5d      	ldr	r2, [pc, #372]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b5b      	ldr	r3, [pc, #364]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f90:	4a59      	ldr	r2, [pc, #356]	; (80010f8 <HAL_GPIO_Init+0x2f4>)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fba:	d025      	beq.n	8001008 <HAL_GPIO_Init+0x204>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a4f      	ldr	r2, [pc, #316]	; (80010fc <HAL_GPIO_Init+0x2f8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d01f      	beq.n	8001004 <HAL_GPIO_Init+0x200>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a4e      	ldr	r2, [pc, #312]	; (8001100 <HAL_GPIO_Init+0x2fc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d019      	beq.n	8001000 <HAL_GPIO_Init+0x1fc>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a4d      	ldr	r2, [pc, #308]	; (8001104 <HAL_GPIO_Init+0x300>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d013      	beq.n	8000ffc <HAL_GPIO_Init+0x1f8>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a4c      	ldr	r2, [pc, #304]	; (8001108 <HAL_GPIO_Init+0x304>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d00d      	beq.n	8000ff8 <HAL_GPIO_Init+0x1f4>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4b      	ldr	r2, [pc, #300]	; (800110c <HAL_GPIO_Init+0x308>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_GPIO_Init+0x1f0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a4a      	ldr	r2, [pc, #296]	; (8001110 <HAL_GPIO_Init+0x30c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_GPIO_Init+0x1ec>
 8000fec:	2306      	movs	r3, #6
 8000fee:	e00c      	b.n	800100a <HAL_GPIO_Init+0x206>
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	e00a      	b.n	800100a <HAL_GPIO_Init+0x206>
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	e008      	b.n	800100a <HAL_GPIO_Init+0x206>
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	e006      	b.n	800100a <HAL_GPIO_Init+0x206>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e004      	b.n	800100a <HAL_GPIO_Init+0x206>
 8001000:	2302      	movs	r3, #2
 8001002:	e002      	b.n	800100a <HAL_GPIO_Init+0x206>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <HAL_GPIO_Init+0x206>
 8001008:	2300      	movs	r3, #0
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	f002 0203 	and.w	r2, r2, #3
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	4093      	lsls	r3, r2
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101a:	4937      	ldr	r1, [pc, #220]	; (80010f8 <HAL_GPIO_Init+0x2f4>)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001028:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <HAL_GPIO_Init+0x310>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800104c:	4a31      	ldr	r2, [pc, #196]	; (8001114 <HAL_GPIO_Init+0x310>)
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001052:	4b30      	ldr	r3, [pc, #192]	; (8001114 <HAL_GPIO_Init+0x310>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001076:	4a27      	ldr	r2, [pc, #156]	; (8001114 <HAL_GPIO_Init+0x310>)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <HAL_GPIO_Init+0x310>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <HAL_GPIO_Init+0x310>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_GPIO_Init+0x310>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <HAL_GPIO_Init+0x310>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	fa22 f303 	lsr.w	r3, r2, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f47f ae97 	bne.w	8000e14 <HAL_GPIO_Init+0x10>
  }
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	371c      	adds	r7, #28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010000 	.word	0x40010000
 80010fc:	48000400 	.word	0x48000400
 8001100:	48000800 	.word	0x48000800
 8001104:	48000c00 	.word	0x48000c00
 8001108:	48001000 	.word	0x48001000
 800110c:	48001400 	.word	0x48001400
 8001110:	48001800 	.word	0x48001800
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001134:	e002      	b.n	800113c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800114e:	af00      	add	r7, sp, #0
 8001150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001154:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001158:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800115a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800115e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	f001 b83a 	b.w	80021e2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001172:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 816f 	beq.w	8001462 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001184:	4bb5      	ldr	r3, [pc, #724]	; (800145c <HAL_RCC_OscConfig+0x314>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	2b04      	cmp	r3, #4
 800118e:	d00c      	beq.n	80011aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001190:	4bb2      	ldr	r3, [pc, #712]	; (800145c <HAL_RCC_OscConfig+0x314>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b08      	cmp	r3, #8
 800119a:	d15c      	bne.n	8001256 <HAL_RCC_OscConfig+0x10e>
 800119c:	4baf      	ldr	r3, [pc, #700]	; (800145c <HAL_RCC_OscConfig+0x314>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a8:	d155      	bne.n	8001256 <HAL_RCC_OscConfig+0x10e>
 80011aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	095b      	lsrs	r3, r3, #5
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d102      	bne.n	80011dc <HAL_RCC_OscConfig+0x94>
 80011d6:	4ba1      	ldr	r3, [pc, #644]	; (800145c <HAL_RCC_OscConfig+0x314>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	e015      	b.n	8001208 <HAL_RCC_OscConfig+0xc0>
 80011dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80011f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011f8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80011fc:	fa93 f3a3 	rbit	r3, r3
 8001200:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001204:	4b95      	ldr	r3, [pc, #596]	; (800145c <HAL_RCC_OscConfig+0x314>)
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800120c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001210:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001214:	fa92 f2a2 	rbit	r2, r2
 8001218:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800121c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001220:	fab2 f282 	clz	r2, r2
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	f042 0220 	orr.w	r2, r2, #32
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	f002 021f 	and.w	r2, r2, #31
 8001230:	2101      	movs	r1, #1
 8001232:	fa01 f202 	lsl.w	r2, r1, r2
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 8111 	beq.w	8001460 <HAL_RCC_OscConfig+0x318>
 800123e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001242:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 8108 	bne.w	8001460 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	f000 bfc6 	b.w	80021e2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001256:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800125a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001266:	d106      	bne.n	8001276 <HAL_RCC_OscConfig+0x12e>
 8001268:	4b7c      	ldr	r3, [pc, #496]	; (800145c <HAL_RCC_OscConfig+0x314>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a7b      	ldr	r2, [pc, #492]	; (800145c <HAL_RCC_OscConfig+0x314>)
 800126e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	e036      	b.n	80012e4 <HAL_RCC_OscConfig+0x19c>
 8001276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800127a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x158>
 8001286:	4b75      	ldr	r3, [pc, #468]	; (800145c <HAL_RCC_OscConfig+0x314>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a74      	ldr	r2, [pc, #464]	; (800145c <HAL_RCC_OscConfig+0x314>)
 800128c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b72      	ldr	r3, [pc, #456]	; (800145c <HAL_RCC_OscConfig+0x314>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a71      	ldr	r2, [pc, #452]	; (800145c <HAL_RCC_OscConfig+0x314>)
 8001298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e021      	b.n	80012e4 <HAL_RCC_OscConfig+0x19c>
 80012a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x184>
 80012b2:	4b6a      	ldr	r3, [pc, #424]	; (800145c <HAL_RCC_OscConfig+0x314>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a69      	ldr	r2, [pc, #420]	; (800145c <HAL_RCC_OscConfig+0x314>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b67      	ldr	r3, [pc, #412]	; (800145c <HAL_RCC_OscConfig+0x314>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a66      	ldr	r2, [pc, #408]	; (800145c <HAL_RCC_OscConfig+0x314>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0x19c>
 80012cc:	4b63      	ldr	r3, [pc, #396]	; (800145c <HAL_RCC_OscConfig+0x314>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a62      	ldr	r2, [pc, #392]	; (800145c <HAL_RCC_OscConfig+0x314>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b60      	ldr	r3, [pc, #384]	; (800145c <HAL_RCC_OscConfig+0x314>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a5f      	ldr	r2, [pc, #380]	; (800145c <HAL_RCC_OscConfig+0x314>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d059      	beq.n	80013a8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fa3e 	bl	8000774 <HAL_GetTick>
 80012f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fc:	e00a      	b.n	8001314 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fe:	f7ff fa39 	bl	8000774 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d902      	bls.n	8001314 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	f000 bf67 	b.w	80021e2 <HAL_RCC_OscConfig+0x109a>
 8001314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001318:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001320:	fa93 f3a3 	rbit	r3, r3
 8001324:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001328:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d102      	bne.n	8001346 <HAL_RCC_OscConfig+0x1fe>
 8001340:	4b46      	ldr	r3, [pc, #280]	; (800145c <HAL_RCC_OscConfig+0x314>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x22a>
 8001346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800135a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800135e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001362:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800136e:	4b3b      	ldr	r3, [pc, #236]	; (800145c <HAL_RCC_OscConfig+0x314>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001376:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800137a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800137e:	fa92 f2a2 	rbit	r2, r2
 8001382:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001386:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800138a:	fab2 f282 	clz	r2, r2
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	f042 0220 	orr.w	r2, r2, #32
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	f002 021f 	and.w	r2, r2, #31
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0ab      	beq.n	80012fe <HAL_RCC_OscConfig+0x1b6>
 80013a6:	e05c      	b.n	8001462 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff f9e4 	bl	8000774 <HAL_GetTick>
 80013ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b2:	f7ff f9df 	bl	8000774 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d902      	bls.n	80013c8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	f000 bf0d 	b.w	80021e2 <HAL_RCC_OscConfig+0x109a>
 80013c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013cc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80013d4:	fa93 f3a3 	rbit	r3, r3
 80013d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80013dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <HAL_RCC_OscConfig+0x2b2>
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_RCC_OscConfig+0x314>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	e015      	b.n	8001426 <HAL_RCC_OscConfig+0x2de>
 80013fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800140e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001412:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001416:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_RCC_OscConfig+0x314>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800142a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800142e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001432:	fa92 f2a2 	rbit	r2, r2
 8001436:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800143a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800143e:	fab2 f282 	clz	r2, r2
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	f042 0220 	orr.w	r2, r2, #32
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	f002 021f 	and.w	r2, r2, #31
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ab      	bne.n	80013b2 <HAL_RCC_OscConfig+0x26a>
 800145a:	e002      	b.n	8001462 <HAL_RCC_OscConfig+0x31a>
 800145c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001466:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 817f 	beq.w	8001776 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001478:	4ba7      	ldr	r3, [pc, #668]	; (8001718 <HAL_RCC_OscConfig+0x5d0>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00c      	beq.n	800149e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001484:	4ba4      	ldr	r3, [pc, #656]	; (8001718 <HAL_RCC_OscConfig+0x5d0>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b08      	cmp	r3, #8
 800148e:	d173      	bne.n	8001578 <HAL_RCC_OscConfig+0x430>
 8001490:	4ba1      	ldr	r3, [pc, #644]	; (8001718 <HAL_RCC_OscConfig+0x5d0>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800149c:	d16c      	bne.n	8001578 <HAL_RCC_OscConfig+0x430>
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80014b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b4:	fab3 f383 	clz	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d102      	bne.n	80014ce <HAL_RCC_OscConfig+0x386>
 80014c8:	4b93      	ldr	r3, [pc, #588]	; (8001718 <HAL_RCC_OscConfig+0x5d0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	e013      	b.n	80014f6 <HAL_RCC_OscConfig+0x3ae>
 80014ce:	2302      	movs	r3, #2
 80014d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80014e0:	2302      	movs	r3, #2
 80014e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014f2:	4b89      	ldr	r3, [pc, #548]	; (8001718 <HAL_RCC_OscConfig+0x5d0>)
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	2202      	movs	r2, #2
 80014f8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80014fc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001500:	fa92 f2a2 	rbit	r2, r2
 8001504:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001508:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800150c:	fab2 f282 	clz	r2, r2
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	f042 0220 	orr.w	r2, r2, #32
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	f002 021f 	and.w	r2, r2, #31
 800151c:	2101      	movs	r1, #1
 800151e:	fa01 f202 	lsl.w	r2, r1, r2
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00a      	beq.n	800153e <HAL_RCC_OscConfig+0x3f6>
 8001528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800152c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d002      	beq.n	800153e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	f000 be52 	b.w	80021e2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153e:	4b76      	ldr	r3, [pc, #472]	; (8001718 <HAL_RCC_OscConfig+0x5d0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800154a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	21f8      	movs	r1, #248	; 0xf8
 8001554:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800155c:	fa91 f1a1 	rbit	r1, r1
 8001560:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001564:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001568:	fab1 f181 	clz	r1, r1
 800156c:	b2c9      	uxtb	r1, r1
 800156e:	408b      	lsls	r3, r1
 8001570:	4969      	ldr	r1, [pc, #420]	; (8001718 <HAL_RCC_OscConfig+0x5d0>)
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001576:	e0fe      	b.n	8001776 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 8088 	beq.w	800169a <HAL_RCC_OscConfig+0x552>
 800158a:	2301      	movs	r3, #1
 800158c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800159c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a0:	fab3 f383 	clz	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	461a      	mov	r2, r3
 80015b2:	2301      	movs	r3, #1
 80015b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff f8dd 	bl	8000774 <HAL_GetTick>
 80015ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c0:	f7ff f8d8 	bl	8000774 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d902      	bls.n	80015d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	f000 be06 	b.w	80021e2 <HAL_RCC_OscConfig+0x109a>
 80015d6:	2302      	movs	r3, #2
 80015d8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80015e0:	fa93 f3a3 	rbit	r3, r3
 80015e4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80015e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	fab3 f383 	clz	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d102      	bne.n	8001606 <HAL_RCC_OscConfig+0x4be>
 8001600:	4b45      	ldr	r3, [pc, #276]	; (8001718 <HAL_RCC_OscConfig+0x5d0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e013      	b.n	800162e <HAL_RCC_OscConfig+0x4e6>
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001618:	2302      	movs	r3, #2
 800161a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800161e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800162a:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <HAL_RCC_OscConfig+0x5d0>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	2202      	movs	r2, #2
 8001630:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001634:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001638:	fa92 f2a2 	rbit	r2, r2
 800163c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001640:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001644:	fab2 f282 	clz	r2, r2
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	f042 0220 	orr.w	r2, r2, #32
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	f002 021f 	and.w	r2, r2, #31
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f202 	lsl.w	r2, r1, r2
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0af      	beq.n	80015c0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <HAL_RCC_OscConfig+0x5d0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800166c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	21f8      	movs	r1, #248	; 0xf8
 8001676:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800167e:	fa91 f1a1 	rbit	r1, r1
 8001682:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001686:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800168a:	fab1 f181 	clz	r1, r1
 800168e:	b2c9      	uxtb	r1, r1
 8001690:	408b      	lsls	r3, r1
 8001692:	4921      	ldr	r1, [pc, #132]	; (8001718 <HAL_RCC_OscConfig+0x5d0>)
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
 8001698:	e06d      	b.n	8001776 <HAL_RCC_OscConfig+0x62e>
 800169a:	2301      	movs	r3, #1
 800169c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80016ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	461a      	mov	r2, r3
 80016c2:	2300      	movs	r3, #0
 80016c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff f855 	bl	8000774 <HAL_GetTick>
 80016ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d0:	f7ff f850 	bl	8000774 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d902      	bls.n	80016e6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	f000 bd7e 	b.w	80021e2 <HAL_RCC_OscConfig+0x109a>
 80016e6:	2302      	movs	r3, #2
 80016e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80016f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fc:	fab3 f383 	clz	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0x5d4>
 8001710:	4b01      	ldr	r3, [pc, #4]	; (8001718 <HAL_RCC_OscConfig+0x5d0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	e016      	b.n	8001744 <HAL_RCC_OscConfig+0x5fc>
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	2302      	movs	r3, #2
 800171e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001734:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001738:	fa93 f3a3 	rbit	r3, r3
 800173c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001740:	4bbf      	ldr	r3, [pc, #764]	; (8001a40 <HAL_RCC_OscConfig+0x8f8>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	2202      	movs	r2, #2
 8001746:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800174a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800174e:	fa92 f2a2 	rbit	r2, r2
 8001752:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001756:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800175a:	fab2 f282 	clz	r2, r2
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	f042 0220 	orr.w	r2, r2, #32
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	f002 021f 	and.w	r2, r2, #31
 800176a:	2101      	movs	r1, #1
 800176c:	fa01 f202 	lsl.w	r2, r1, r2
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ac      	bne.n	80016d0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001776:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8113 	beq.w	80019b2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800178c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001790:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d07c      	beq.n	8001896 <HAL_RCC_OscConfig+0x74e>
 800179c:	2301      	movs	r3, #1
 800179e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80017ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	4ba2      	ldr	r3, [pc, #648]	; (8001a44 <HAL_RCC_OscConfig+0x8fc>)
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	461a      	mov	r2, r3
 80017c2:	2301      	movs	r3, #1
 80017c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7fe ffd5 	bl	8000774 <HAL_GetTick>
 80017ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d0:	f7fe ffd0 	bl	8000774 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d902      	bls.n	80017e6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	f000 bcfe 	b.w	80021e2 <HAL_RCC_OscConfig+0x109a>
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001802:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001806:	2202      	movs	r2, #2
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	fa93 f2a3 	rbit	r2, r3
 8001818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001826:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800182a:	2202      	movs	r2, #2
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001832:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	fa93 f2a3 	rbit	r2, r3
 800183c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001840:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001844:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	4b7e      	ldr	r3, [pc, #504]	; (8001a40 <HAL_RCC_OscConfig+0x8f8>)
 8001848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800184a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001852:	2102      	movs	r1, #2
 8001854:	6019      	str	r1, [r3, #0]
 8001856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f1a3 	rbit	r1, r3
 8001864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001868:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800186c:	6019      	str	r1, [r3, #0]
  return result;
 800186e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001872:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d09d      	beq.n	80017d0 <HAL_RCC_OscConfig+0x688>
 8001894:	e08d      	b.n	80019b2 <HAL_RCC_OscConfig+0x86a>
 8001896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f2a3 	rbit	r2, r3
 80018b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018b8:	601a      	str	r2, [r3, #0]
  return result;
 80018ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <HAL_RCC_OscConfig+0x8fc>)
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	461a      	mov	r2, r3
 80018d4:	2300      	movs	r3, #0
 80018d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d8:	f7fe ff4c 	bl	8000774 <HAL_GetTick>
 80018dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e2:	f7fe ff47 	bl	8000774 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d902      	bls.n	80018f8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	f000 bc75 	b.w	80021e2 <HAL_RCC_OscConfig+0x109a>
 80018f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001900:	2202      	movs	r2, #2
 8001902:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001908:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	fa93 f2a3 	rbit	r2, r3
 8001912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001916:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001920:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001924:	2202      	movs	r2, #2
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	fa93 f2a3 	rbit	r2, r3
 8001936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001944:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001948:	2202      	movs	r2, #2
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001950:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	fa93 f2a3 	rbit	r2, r3
 800195a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001962:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <HAL_RCC_OscConfig+0x8f8>)
 8001966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001968:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001970:	2102      	movs	r1, #2
 8001972:	6019      	str	r1, [r3, #0]
 8001974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001978:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	fa93 f1a3 	rbit	r1, r3
 8001982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001986:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800198a:	6019      	str	r1, [r3, #0]
  return result;
 800198c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001990:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f003 031f 	and.w	r3, r3, #31
 80019a6:	2101      	movs	r1, #1
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d197      	bne.n	80018e2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 81a5 	beq.w	8001d12 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_RCC_OscConfig+0x8f8>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d116      	bne.n	8001a08 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_RCC_OscConfig+0x8f8>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <HAL_RCC_OscConfig+0x8f8>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_RCC_OscConfig+0x8f8>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80019ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a00:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_RCC_OscConfig+0x900>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d121      	bne.n	8001a58 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_RCC_OscConfig+0x900>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <HAL_RCC_OscConfig+0x900>)
 8001a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a20:	f7fe fea8 	bl	8000774 <HAL_GetTick>
 8001a24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	e010      	b.n	8001a4c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2a:	f7fe fea3 	bl	8000774 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d908      	bls.n	8001a4c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e3d1      	b.n	80021e2 <HAL_RCC_OscConfig+0x109a>
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	10908120 	.word	0x10908120
 8001a48:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	4b8d      	ldr	r3, [pc, #564]	; (8001c84 <HAL_RCC_OscConfig+0xb3c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0e8      	beq.n	8001a2a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x92e>
 8001a68:	4b87      	ldr	r3, [pc, #540]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4a86      	ldr	r2, [pc, #536]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6213      	str	r3, [r2, #32]
 8001a74:	e035      	b.n	8001ae2 <HAL_RCC_OscConfig+0x99a>
 8001a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x958>
 8001a86:	4b80      	ldr	r3, [pc, #512]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a7f      	ldr	r2, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	4b7d      	ldr	r3, [pc, #500]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a7c      	ldr	r2, [pc, #496]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6213      	str	r3, [r2, #32]
 8001a9e:	e020      	b.n	8001ae2 <HAL_RCC_OscConfig+0x99a>
 8001aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x982>
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a74      	ldr	r2, [pc, #464]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	4b72      	ldr	r3, [pc, #456]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4a71      	ldr	r2, [pc, #452]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6213      	str	r3, [r2, #32]
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x99a>
 8001aca:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a6e      	ldr	r2, [pc, #440]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	4b6c      	ldr	r3, [pc, #432]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a6b      	ldr	r2, [pc, #428]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8081 	beq.w	8001bf6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af4:	f7fe fe3e 	bl	8000774 <HAL_GetTick>
 8001af8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	e00b      	b.n	8001b16 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7fe fe39 	bl	8000774 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e365      	b.n	80021e2 <HAL_RCC_OscConfig+0x109a>
 8001b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b1e:	2202      	movs	r2, #2
 8001b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	fa93 f2a3 	rbit	r2, r3
 8001b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b42:	2202      	movs	r2, #2
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b5c:	601a      	str	r2, [r3, #0]
  return result;
 8001b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b62:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d102      	bne.n	8001b82 <HAL_RCC_OscConfig+0xa3a>
 8001b7c:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	e013      	b.n	8001baa <HAL_RCC_OscConfig+0xa62>
 8001b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b86:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b92:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f2a3 	rbit	r2, r3
 8001b9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	6011      	str	r1, [r2, #0]
 8001bb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	fa92 f1a2 	rbit	r1, r2
 8001bc4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bc8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001bcc:	6011      	str	r1, [r2, #0]
  return result;
 8001bce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bd2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	fab2 f282 	clz	r2, r2
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	f002 021f 	and.w	r2, r2, #31
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f202 	lsl.w	r2, r1, r2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d084      	beq.n	8001afe <HAL_RCC_OscConfig+0x9b6>
 8001bf4:	e083      	b.n	8001cfe <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7fe fdbd 	bl	8000774 <HAL_GetTick>
 8001bfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7fe fdb8 	bl	8000774 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e2e4      	b.n	80021e2 <HAL_RCC_OscConfig+0x109a>
 8001c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c20:	2202      	movs	r2, #2
 8001c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c28:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	fa93 f2a3 	rbit	r2, r3
 8001c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c40:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c44:	2202      	movs	r2, #2
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fa93 f2a3 	rbit	r2, r3
 8001c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c5e:	601a      	str	r2, [r3, #0]
  return result;
 8001c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c64:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	095b      	lsrs	r3, r3, #5
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d106      	bne.n	8001c8c <HAL_RCC_OscConfig+0xb44>
 8001c7e:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <HAL_RCC_OscConfig+0xb40>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	e017      	b.n	8001cb4 <HAL_RCC_OscConfig+0xb6c>
 8001c84:	40007000 	.word	0x40007000
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c90:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c94:	2202      	movs	r2, #2
 8001c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	fa93 f2a3 	rbit	r2, r3
 8001ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001caa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	4bb3      	ldr	r3, [pc, #716]	; (8001f80 <HAL_RCC_OscConfig+0xe38>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cb8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	6011      	str	r1, [r2, #0]
 8001cc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cc4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	fa92 f1a2 	rbit	r1, r2
 8001cce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cd2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001cd6:	6011      	str	r1, [r2, #0]
  return result;
 8001cd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cdc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	fab2 f282 	clz	r2, r2
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	f002 021f 	and.w	r2, r2, #31
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d180      	bne.n	8001c00 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cfe:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d105      	bne.n	8001d12 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d06:	4b9e      	ldr	r3, [pc, #632]	; (8001f80 <HAL_RCC_OscConfig+0xe38>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a9d      	ldr	r2, [pc, #628]	; (8001f80 <HAL_RCC_OscConfig+0xe38>)
 8001d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 825e 	beq.w	80021e0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d24:	4b96      	ldr	r3, [pc, #600]	; (8001f80 <HAL_RCC_OscConfig+0xe38>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	f000 821f 	beq.w	8002170 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	f040 8170 	bne.w	8002024 <HAL_RCC_OscConfig+0xedc>
 8001d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d48:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	fa93 f2a3 	rbit	r2, r3
 8001d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d64:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d68:	601a      	str	r2, [r3, #0]
  return result;
 8001d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d72:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d74:	fab3 f383 	clz	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	461a      	mov	r2, r3
 8001d86:	2300      	movs	r3, #0
 8001d88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7fe fcf3 	bl	8000774 <HAL_GetTick>
 8001d8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d92:	e009      	b.n	8001da8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d94:	f7fe fcee 	bl	8000774 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e21c      	b.n	80021e2 <HAL_RCC_OscConfig+0x109a>
 8001da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001dcc:	601a      	str	r2, [r3, #0]
  return result;
 8001dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001dd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_OscConfig+0xcaa>
 8001dec:	4b64      	ldr	r3, [pc, #400]	; (8001f80 <HAL_RCC_OscConfig+0xe38>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	e027      	b.n	8001e42 <HAL_RCC_OscConfig+0xcfa>
 8001df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001dfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e04:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fa93 f2a3 	rbit	r2, r3
 8001e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e38:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	4b50      	ldr	r3, [pc, #320]	; (8001f80 <HAL_RCC_OscConfig+0xe38>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e46:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e4e:	6011      	str	r1, [r2, #0]
 8001e50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	fa92 f1a2 	rbit	r1, r2
 8001e5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e62:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001e66:	6011      	str	r1, [r2, #0]
  return result;
 8001e68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e6c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	fab2 f282 	clz	r2, r2
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f042 0220 	orr.w	r2, r2, #32
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f002 021f 	and.w	r2, r2, #31
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f202 	lsl.w	r2, r1, r2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d182      	bne.n	8001d94 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8e:	4b3c      	ldr	r3, [pc, #240]	; (8001f80 <HAL_RCC_OscConfig+0xe38>)
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	f023 020f 	bic.w	r2, r3, #15
 8001e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	4937      	ldr	r1, [pc, #220]	; (8001f80 <HAL_RCC_OscConfig+0xe38>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001ea8:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <HAL_RCC_OscConfig+0xe38>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6a19      	ldr	r1, [r3, #32]
 8001ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	492d      	ldr	r1, [pc, #180]	; (8001f80 <HAL_RCC_OscConfig+0xe38>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
 8001ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	fa93 f2a3 	rbit	r2, r3
 8001eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ef4:	601a      	str	r2, [r3, #0]
  return result;
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001efe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	461a      	mov	r2, r3
 8001f12:	2301      	movs	r3, #1
 8001f14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7fe fc2d 	bl	8000774 <HAL_GetTick>
 8001f1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f1e:	e009      	b.n	8001f34 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f20:	f7fe fc28 	bl	8000774 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e156      	b.n	80021e2 <HAL_RCC_OscConfig+0x109a>
 8001f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f38:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	fa93 f2a3 	rbit	r2, r3
 8001f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f54:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f58:	601a      	str	r2, [r3, #0]
  return result;
 8001f5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_RCC_OscConfig+0xe3c>
 8001f78:	4b01      	ldr	r3, [pc, #4]	; (8001f80 <HAL_RCC_OscConfig+0xe38>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	e02a      	b.n	8001fd4 <HAL_RCC_OscConfig+0xe8c>
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001f8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f96:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	fa93 f2a3 	rbit	r2, r3
 8001fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fca:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	4b86      	ldr	r3, [pc, #536]	; (80021ec <HAL_RCC_OscConfig+0x10a4>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001fdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fe0:	6011      	str	r1, [r2, #0]
 8001fe2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fe6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	fa92 f1a2 	rbit	r1, r2
 8001ff0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ff4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001ff8:	6011      	str	r1, [r2, #0]
  return result;
 8001ffa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ffe:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	fab2 f282 	clz	r2, r2
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	f042 0220 	orr.w	r2, r2, #32
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f002 021f 	and.w	r2, r2, #31
 8002014:	2101      	movs	r1, #1
 8002016:	fa01 f202 	lsl.w	r2, r1, r2
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	f43f af7f 	beq.w	8001f20 <HAL_RCC_OscConfig+0xdd8>
 8002022:	e0dd      	b.n	80021e0 <HAL_RCC_OscConfig+0x1098>
 8002024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002028:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800202c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002036:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002044:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002048:	601a      	str	r2, [r3, #0]
  return result;
 800204a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002052:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800205e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	461a      	mov	r2, r3
 8002066:	2300      	movs	r3, #0
 8002068:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe fb83 	bl	8000774 <HAL_GetTick>
 800206e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002072:	e009      	b.n	8002088 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002074:	f7fe fb7e 	bl	8000774 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0ac      	b.n	80021e2 <HAL_RCC_OscConfig+0x109a>
 8002088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	fa93 f2a3 	rbit	r2, r3
 80020a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020ac:	601a      	str	r2, [r3, #0]
  return result;
 80020ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d102      	bne.n	80020d2 <HAL_RCC_OscConfig+0xf8a>
 80020cc:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_RCC_OscConfig+0x10a4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	e027      	b.n	8002122 <HAL_RCC_OscConfig+0xfda>
 80020d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80020da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fa93 f2a3 	rbit	r2, r3
 80020ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	fa93 f2a3 	rbit	r2, r3
 8002114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002118:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	4b33      	ldr	r3, [pc, #204]	; (80021ec <HAL_RCC_OscConfig+0x10a4>)
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002126:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800212a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800212e:	6011      	str	r1, [r2, #0]
 8002130:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002134:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	fa92 f1a2 	rbit	r1, r2
 800213e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002142:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002146:	6011      	str	r1, [r2, #0]
  return result;
 8002148:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800214c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	fab2 f282 	clz	r2, r2
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	f042 0220 	orr.w	r2, r2, #32
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	f002 021f 	and.w	r2, r2, #31
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d182      	bne.n	8002074 <HAL_RCC_OscConfig+0xf2c>
 800216e:	e037      	b.n	80021e0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002174:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e02e      	b.n	80021e2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_OscConfig+0x10a4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <HAL_RCC_OscConfig+0x10a4>)
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002194:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002198:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800219c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d117      	bne.n	80021dc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021b0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d10b      	bne.n	80021dc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80021c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c8:	f003 020f 	and.w	r2, r3, #15
 80021cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000

080021f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b09e      	sub	sp, #120	; 0x78
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e162      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b90      	ldr	r3, [pc, #576]	; (800244c <HAL_RCC_ClockConfig+0x25c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d910      	bls.n	8002238 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b8d      	ldr	r3, [pc, #564]	; (800244c <HAL_RCC_ClockConfig+0x25c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	498b      	ldr	r1, [pc, #556]	; (800244c <HAL_RCC_ClockConfig+0x25c>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b89      	ldr	r3, [pc, #548]	; (800244c <HAL_RCC_ClockConfig+0x25c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e14a      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4b82      	ldr	r3, [pc, #520]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	497f      	ldr	r1, [pc, #508]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80dc 	beq.w	800241c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d13c      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xf6>
 800226c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002270:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800227a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d102      	bne.n	8002296 <HAL_RCC_ClockConfig+0xa6>
 8002290:	4b6f      	ldr	r3, [pc, #444]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	e00f      	b.n	80022b6 <HAL_RCC_ClockConfig+0xc6>
 8002296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800229a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	667b      	str	r3, [r7, #100]	; 0x64
 80022a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a8:	663b      	str	r3, [r7, #96]	; 0x60
 80022aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022b2:	4b67      	ldr	r3, [pc, #412]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80022bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022be:	fa92 f2a2 	rbit	r2, r2
 80022c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80022c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022c6:	fab2 f282 	clz	r2, r2
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	f042 0220 	orr.w	r2, r2, #32
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	f002 021f 	and.w	r2, r2, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d17b      	bne.n	80023da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0f3      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d13c      	bne.n	8002368 <HAL_RCC_ClockConfig+0x178>
 80022ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b01      	cmp	r3, #1
 8002310:	d102      	bne.n	8002318 <HAL_RCC_ClockConfig+0x128>
 8002312:	4b4f      	ldr	r3, [pc, #316]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	e00f      	b.n	8002338 <HAL_RCC_ClockConfig+0x148>
 8002318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800231c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	647b      	str	r3, [r7, #68]	; 0x44
 8002326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800232a:	643b      	str	r3, [r7, #64]	; 0x40
 800232c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002334:	4b46      	ldr	r3, [pc, #280]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800233c:	63ba      	str	r2, [r7, #56]	; 0x38
 800233e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002340:	fa92 f2a2 	rbit	r2, r2
 8002344:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002348:	fab2 f282 	clz	r2, r2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f042 0220 	orr.w	r2, r2, #32
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	f002 021f 	and.w	r2, r2, #31
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f202 	lsl.w	r2, r1, r2
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d13a      	bne.n	80023da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b2      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
 8002368:	2302      	movs	r3, #2
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <HAL_RCC_ClockConfig+0x1a0>
 800238a:	4b31      	ldr	r3, [pc, #196]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	e00d      	b.n	80023ac <HAL_RCC_ClockConfig+0x1bc>
 8002390:	2302      	movs	r3, #2
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
 800239c:	2302      	movs	r3, #2
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	2202      	movs	r2, #2
 80023ae:	61ba      	str	r2, [r7, #24]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	fa92 f2a2 	rbit	r2, r2
 80023b6:	617a      	str	r2, [r7, #20]
  return result;
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	fab2 f282 	clz	r2, r2
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	f042 0220 	orr.w	r2, r2, #32
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	f002 021f 	and.w	r2, r2, #31
 80023ca:	2101      	movs	r1, #1
 80023cc:	fa01 f202 	lsl.w	r2, r1, r2
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e079      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	491a      	ldr	r1, [pc, #104]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7fe f9c2 	bl	8000774 <HAL_GetTick>
 80023f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe f9be 	bl	8000774 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e061      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_RCC_ClockConfig+0x260>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_ClockConfig+0x25c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d214      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_RCC_ClockConfig+0x25c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0207 	bic.w	r2, r3, #7
 8002432:	4906      	ldr	r1, [pc, #24]	; (800244c <HAL_RCC_ClockConfig+0x25c>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <HAL_RCC_ClockConfig+0x25c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e040      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
 800244c:	40022000 	.word	0x40022000
 8002450:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	491a      	ldr	r1, [pc, #104]	; (80024d8 <HAL_RCC_ClockConfig+0x2e8>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4912      	ldr	r1, [pc, #72]	; (80024d8 <HAL_RCC_ClockConfig+0x2e8>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002492:	f000 f829 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8002496:	4601      	mov	r1, r0
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_RCC_ClockConfig+0x2e8>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a0:	22f0      	movs	r2, #240	; 0xf0
 80024a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	fa92 f2a2 	rbit	r2, r2
 80024aa:	60fa      	str	r2, [r7, #12]
  return result;
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	fab2 f282 	clz	r2, r2
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	40d3      	lsrs	r3, r2
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x2ec>)
 80024b8:	5cd3      	ldrb	r3, [r2, r3]
 80024ba:	fa21 f303 	lsr.w	r3, r1, r3
 80024be:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <HAL_RCC_ClockConfig+0x2f0>)
 80024c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_RCC_ClockConfig+0x2f4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f910 	bl	80006ec <HAL_InitTick>
  
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3778      	adds	r7, #120	; 0x78
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08003e4c 	.word	0x08003e4c
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000004 	.word	0x20000004

080024e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b08b      	sub	sp, #44	; 0x2c
 80024ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002502:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b04      	cmp	r3, #4
 8002510:	d002      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x30>
 8002512:	2b08      	cmp	r3, #8
 8002514:	d003      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0x36>
 8002516:	e03f      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800251a:	623b      	str	r3, [r7, #32]
      break;
 800251c:	e03f      	b.n	800259e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002524:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002528:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	fa92 f2a2 	rbit	r2, r2
 8002530:	607a      	str	r2, [r7, #4]
  return result;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	fab2 f282 	clz	r2, r2
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	40d3      	lsrs	r3, r2
 800253c:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	220f      	movs	r2, #15
 800254c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	fa92 f2a2 	rbit	r2, r2
 8002554:	60fa      	str	r2, [r7, #12]
  return result;
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	fab2 f282 	clz	r2, r2
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	40d3      	lsrs	r3, r2
 8002560:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002570:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	fbb2 f2f3 	udiv	r2, r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
 8002580:	e007      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fbb2 f2f3 	udiv	r2, r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	623b      	str	r3, [r7, #32]
      break;
 8002596:	e002      	b.n	800259e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800259a:	623b      	str	r3, [r7, #32]
      break;
 800259c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259e:	6a3b      	ldr	r3, [r7, #32]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	372c      	adds	r7, #44	; 0x2c
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	40021000 	.word	0x40021000
 80025b0:	007a1200 	.word	0x007a1200
 80025b4:	08003e64 	.word	0x08003e64
 80025b8:	08003e74 	.word	0x08003e74

080025bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000000 	.word	0x20000000

080025d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025da:	f7ff ffef 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 80025de:	4601      	mov	r1, r0
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	fa92 f2a2 	rbit	r2, r2
 80025f4:	603a      	str	r2, [r7, #0]
  return result;
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	fab2 f282 	clz	r2, r2
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	40d3      	lsrs	r3, r2
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	08003e5c 	.word	0x08003e5c

08002618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800261e:	f7ff ffcd 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 8002622:	4601      	mov	r1, r0
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800262c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002630:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	fa92 f2a2 	rbit	r2, r2
 8002638:	603a      	str	r2, [r7, #0]
  return result;
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	fab2 f282 	clz	r2, r2
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	40d3      	lsrs	r3, r2
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	08003e5c 	.word	0x08003e5c

0800265c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b092      	sub	sp, #72	; 0x48
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800266c:	2300      	movs	r3, #0
 800266e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80d4 	beq.w	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002680:	4b4e      	ldr	r3, [pc, #312]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10e      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	4b4b      	ldr	r3, [pc, #300]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	4a4a      	ldr	r2, [pc, #296]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002696:	61d3      	str	r3, [r2, #28]
 8002698:	4b48      	ldr	r3, [pc, #288]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a4:	2301      	movs	r3, #1
 80026a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026aa:	4b45      	ldr	r3, [pc, #276]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d118      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b6:	4b42      	ldr	r3, [pc, #264]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a41      	ldr	r2, [pc, #260]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c2:	f7fe f857 	bl	8000774 <HAL_GetTick>
 80026c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	e008      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ca:	f7fe f853 	bl	8000774 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b64      	cmp	r3, #100	; 0x64
 80026d6:	d901      	bls.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1d6      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026e8:	4b34      	ldr	r3, [pc, #208]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8084 	beq.w	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002704:	429a      	cmp	r2, r3
 8002706:	d07c      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002708:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002716:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	461a      	mov	r2, r3
 8002732:	2301      	movs	r3, #1
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800273a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	461a      	mov	r2, r3
 8002756:	2300      	movs	r3, #0
 8002758:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800275a:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800275e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d04b      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe f803 	bl	8000774 <HAL_GetTick>
 800276e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fd ffff 	bl	8000774 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e180      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002788:	2302      	movs	r3, #2
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
 8002794:	2302      	movs	r3, #2
 8002796:	623b      	str	r3, [r7, #32]
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	61fb      	str	r3, [r7, #28]
  return result;
 80027a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d108      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027b6:	4b01      	ldr	r3, [pc, #4]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	e00d      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40007000 	.word	0x40007000
 80027c4:	10908100 	.word	0x10908100
 80027c8:	2302      	movs	r3, #2
 80027ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	4b9a      	ldr	r3, [pc, #616]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	2202      	movs	r2, #2
 80027da:	613a      	str	r2, [r7, #16]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	fa92 f2a2 	rbit	r2, r2
 80027e2:	60fa      	str	r2, [r7, #12]
  return result;
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	fab2 f282 	clz	r2, r2
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	f002 021f 	and.w	r2, r2, #31
 80027f6:	2101      	movs	r1, #1
 80027f8:	fa01 f202 	lsl.w	r2, r1, r2
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0b7      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002802:	4b8f      	ldr	r3, [pc, #572]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	498c      	ldr	r1, [pc, #560]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002814:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281c:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	4a87      	ldr	r2, [pc, #540]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002826:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002834:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	f023 0203 	bic.w	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	497f      	ldr	r1, [pc, #508]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002852:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	4978      	ldr	r1, [pc, #480]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002860:	4313      	orrs	r3, r2
 8002862:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002870:	4b73      	ldr	r3, [pc, #460]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	4970      	ldr	r1, [pc, #448]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800288e:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f023 0210 	bic.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4969      	ldr	r1, [pc, #420]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028ac:	4b64      	ldr	r3, [pc, #400]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	4961      	ldr	r1, [pc, #388]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028ca:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f023 0220 	bic.w	r2, r3, #32
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	495a      	ldr	r1, [pc, #360]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028e8:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	4952      	ldr	r1, [pc, #328]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002906:	4b4e      	ldr	r3, [pc, #312]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	494b      	ldr	r1, [pc, #300]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002924:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4943      	ldr	r1, [pc, #268]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002942:	4b3f      	ldr	r3, [pc, #252]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	493c      	ldr	r1, [pc, #240]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002960:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	4934      	ldr	r1, [pc, #208]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	492d      	ldr	r1, [pc, #180]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800299c:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	4925      	ldr	r1, [pc, #148]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80029ba:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	491e      	ldr	r1, [pc, #120]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80029d8:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	4916      	ldr	r1, [pc, #88]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	490f      	ldr	r1, [pc, #60]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00c      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a32:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	e002      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a46:	4913      	ldr	r1, [pc, #76]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a58:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a64:	490b      	ldr	r1, [pc, #44]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a82:	4904      	ldr	r1, [pc, #16]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3748      	adds	r7, #72	; 0x48
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e040      	b.n	8002b2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fd fd12 	bl	80004e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	; 0x24
 8002ac4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fb32 	bl	8003140 <UART_SetConfig>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e022      	b.n	8002b2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fcfc 	bl	80034ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fd83 	bl	8003630 <UART_CheckIdleState>
 8002b2a:	4603      	mov	r3, r0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b0ba      	sub	sp, #232	; 0xe8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b62:	4013      	ands	r3, r2
 8002b64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d115      	bne.n	8002b9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00f      	beq.n	8002b9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d009      	beq.n	8002b9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 82a3 	beq.w	80030d8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
      }
      return;
 8002b9a:	e29d      	b.n	80030d8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8117 	beq.w	8002dd4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002bb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002bb6:	4b85      	ldr	r3, [pc, #532]	; (8002dcc <HAL_UART_IRQHandler+0x298>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 810a 	beq.w	8002dd4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d011      	beq.n	8002bf0 <HAL_UART_IRQHandler+0xbc>
 8002bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00b      	beq.n	8002bf0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d011      	beq.n	8002c20 <HAL_UART_IRQHandler+0xec>
 8002bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00b      	beq.n	8002c20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c16:	f043 0204 	orr.w	r2, r3, #4
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d011      	beq.n	8002c50 <HAL_UART_IRQHandler+0x11c>
 8002c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c46:	f043 0202 	orr.w	r2, r3, #2
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d017      	beq.n	8002c8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00b      	beq.n	8002c8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c82:	f043 0208 	orr.w	r2, r3, #8
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d012      	beq.n	8002cbe <HAL_UART_IRQHandler+0x18a>
 8002c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00c      	beq.n	8002cbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8209 	beq.w	80030dc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b40      	cmp	r3, #64	; 0x40
 8002d08:	d005      	beq.n	8002d16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d04f      	beq.n	8002db6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fe60 	bl	80039dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	2b40      	cmp	r3, #64	; 0x40
 8002d28:	d141      	bne.n	8002dae <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3308      	adds	r3, #8
 8002d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d38:	e853 3f00 	ldrex	r3, [r3]
 8002d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3308      	adds	r3, #8
 8002d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d66:	e841 2300 	strex	r3, r2, [r1]
 8002d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1d9      	bne.n	8002d2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d013      	beq.n	8002da6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <HAL_UART_IRQHandler+0x29c>)
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd feee 	bl	8000b6c <HAL_DMA_Abort_IT>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d017      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002da0:	4610      	mov	r0, r2
 8002da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da4:	e00f      	b.n	8002dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f9c0 	bl	800312c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dac:	e00b      	b.n	8002dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f9bc 	bl	800312c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db4:	e007      	b.n	8002dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f9b8 	bl	800312c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002dc4:	e18a      	b.n	80030dc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc6:	bf00      	nop
    return;
 8002dc8:	e188      	b.n	80030dc <HAL_UART_IRQHandler+0x5a8>
 8002dca:	bf00      	nop
 8002dcc:	04000120 	.word	0x04000120
 8002dd0:	08003c75 	.word	0x08003c75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	f040 8143 	bne.w	8003064 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 813c 	beq.w	8003064 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8135 	beq.w	8003064 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2210      	movs	r2, #16
 8002e00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	f040 80b1 	bne.w	8002f74 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 815c 	beq.w	80030e0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e32:	429a      	cmp	r2, r3
 8002e34:	f080 8154 	bcs.w	80030e0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	f000 8085 	beq.w	8002f58 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e7c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e80:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e88:	e841 2300 	strex	r3, r2, [r1]
 8002e8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1da      	bne.n	8002e4e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea2:	e853 3f00 	ldrex	r3, [r3]
 8002ea6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ebc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ec4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e1      	bne.n	8002e98 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3308      	adds	r3, #8
 8002eda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ede:	e853 3f00 	ldrex	r3, [r3]
 8002ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ef8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002efa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002efe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f00:	e841 2300 	strex	r3, r2, [r1]
 8002f04:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e3      	bne.n	8002ed4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f20:	e853 3f00 	ldrex	r3, [r3]
 8002f24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f28:	f023 0310 	bic.w	r3, r3, #16
 8002f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f42:	e841 2300 	strex	r3, r2, [r1]
 8002f46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1e4      	bne.n	8002f18 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fdd1 	bl	8000afa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fd f931 	bl	80001d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f72:	e0b5      	b.n	80030e0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80a7 	beq.w	80030e4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002f96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80a2 	beq.w	80030e4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e4      	bne.n	8002fa0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3308      	adds	r3, #8
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	e853 3f00 	ldrex	r3, [r3]
 8002fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ffa:	633a      	str	r2, [r7, #48]	; 0x30
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e3      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	60fb      	str	r3, [r7, #12]
   return(result);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f023 0310 	bic.w	r3, r3, #16
 8003034:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	69b9      	ldr	r1, [r7, #24]
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	e841 2300 	strex	r3, r2, [r1]
 800304e:	617b      	str	r3, [r7, #20]
   return(result);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1e4      	bne.n	8003020 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003056:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800305a:	4619      	mov	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7fd f8b9 	bl	80001d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003062:	e03f      	b.n	80030e4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00e      	beq.n	800308e <HAL_UART_IRQHandler+0x55a>
 8003070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003084:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fe34 	bl	8003cf4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800308c:	e02d      	b.n	80030ea <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800308e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00e      	beq.n	80030b8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800309a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d01c      	beq.n	80030e8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
    }
    return;
 80030b6:	e017      	b.n	80030e8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d012      	beq.n	80030ea <HAL_UART_IRQHandler+0x5b6>
 80030c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00c      	beq.n	80030ea <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fde5 	bl	8003ca0 <UART_EndTransmit_IT>
    return;
 80030d6:	e008      	b.n	80030ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80030d8:	bf00      	nop
 80030da:	e006      	b.n	80030ea <HAL_UART_IRQHandler+0x5b6>
    return;
 80030dc:	bf00      	nop
 80030de:	e004      	b.n	80030ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80030e0:	bf00      	nop
 80030e2:	e002      	b.n	80030ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80030e4:	bf00      	nop
 80030e6:	e000      	b.n	80030ea <HAL_UART_IRQHandler+0x5b6>
    return;
 80030e8:	bf00      	nop
  }

}
 80030ea:	37e8      	adds	r7, #232	; 0xe8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b92      	ldr	r3, [pc, #584]	; (80033b4 <UART_SetConfig+0x274>)
 800316c:	4013      	ands	r3, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	6979      	ldr	r1, [r7, #20]
 8003174:	430b      	orrs	r3, r1
 8003176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a80      	ldr	r2, [pc, #512]	; (80033b8 <UART_SetConfig+0x278>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d120      	bne.n	80031fe <UART_SetConfig+0xbe>
 80031bc:	4b7f      	ldr	r3, [pc, #508]	; (80033bc <UART_SetConfig+0x27c>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d817      	bhi.n	80031f8 <UART_SetConfig+0xb8>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <UART_SetConfig+0x90>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031ed 	.word	0x080031ed
 80031d8:	080031f3 	.word	0x080031f3
 80031dc:	080031e7 	.word	0x080031e7
 80031e0:	2301      	movs	r3, #1
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e0b5      	b.n	8003352 <UART_SetConfig+0x212>
 80031e6:	2302      	movs	r3, #2
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e0b2      	b.n	8003352 <UART_SetConfig+0x212>
 80031ec:	2304      	movs	r3, #4
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	e0af      	b.n	8003352 <UART_SetConfig+0x212>
 80031f2:	2308      	movs	r3, #8
 80031f4:	77fb      	strb	r3, [r7, #31]
 80031f6:	e0ac      	b.n	8003352 <UART_SetConfig+0x212>
 80031f8:	2310      	movs	r3, #16
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	e0a9      	b.n	8003352 <UART_SetConfig+0x212>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a6f      	ldr	r2, [pc, #444]	; (80033c0 <UART_SetConfig+0x280>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d124      	bne.n	8003252 <UART_SetConfig+0x112>
 8003208:	4b6c      	ldr	r3, [pc, #432]	; (80033bc <UART_SetConfig+0x27c>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003210:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003214:	d011      	beq.n	800323a <UART_SetConfig+0xfa>
 8003216:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800321a:	d817      	bhi.n	800324c <UART_SetConfig+0x10c>
 800321c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003220:	d011      	beq.n	8003246 <UART_SetConfig+0x106>
 8003222:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003226:	d811      	bhi.n	800324c <UART_SetConfig+0x10c>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <UART_SetConfig+0xf4>
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d006      	beq.n	8003240 <UART_SetConfig+0x100>
 8003232:	e00b      	b.n	800324c <UART_SetConfig+0x10c>
 8003234:	2300      	movs	r3, #0
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e08b      	b.n	8003352 <UART_SetConfig+0x212>
 800323a:	2302      	movs	r3, #2
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e088      	b.n	8003352 <UART_SetConfig+0x212>
 8003240:	2304      	movs	r3, #4
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e085      	b.n	8003352 <UART_SetConfig+0x212>
 8003246:	2308      	movs	r3, #8
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	e082      	b.n	8003352 <UART_SetConfig+0x212>
 800324c:	2310      	movs	r3, #16
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e07f      	b.n	8003352 <UART_SetConfig+0x212>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5b      	ldr	r2, [pc, #364]	; (80033c4 <UART_SetConfig+0x284>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d124      	bne.n	80032a6 <UART_SetConfig+0x166>
 800325c:	4b57      	ldr	r3, [pc, #348]	; (80033bc <UART_SetConfig+0x27c>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003264:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003268:	d011      	beq.n	800328e <UART_SetConfig+0x14e>
 800326a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800326e:	d817      	bhi.n	80032a0 <UART_SetConfig+0x160>
 8003270:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003274:	d011      	beq.n	800329a <UART_SetConfig+0x15a>
 8003276:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800327a:	d811      	bhi.n	80032a0 <UART_SetConfig+0x160>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <UART_SetConfig+0x148>
 8003280:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003284:	d006      	beq.n	8003294 <UART_SetConfig+0x154>
 8003286:	e00b      	b.n	80032a0 <UART_SetConfig+0x160>
 8003288:	2300      	movs	r3, #0
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e061      	b.n	8003352 <UART_SetConfig+0x212>
 800328e:	2302      	movs	r3, #2
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e05e      	b.n	8003352 <UART_SetConfig+0x212>
 8003294:	2304      	movs	r3, #4
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e05b      	b.n	8003352 <UART_SetConfig+0x212>
 800329a:	2308      	movs	r3, #8
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	e058      	b.n	8003352 <UART_SetConfig+0x212>
 80032a0:	2310      	movs	r3, #16
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e055      	b.n	8003352 <UART_SetConfig+0x212>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a47      	ldr	r2, [pc, #284]	; (80033c8 <UART_SetConfig+0x288>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d124      	bne.n	80032fa <UART_SetConfig+0x1ba>
 80032b0:	4b42      	ldr	r3, [pc, #264]	; (80033bc <UART_SetConfig+0x27c>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80032b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032bc:	d011      	beq.n	80032e2 <UART_SetConfig+0x1a2>
 80032be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032c2:	d817      	bhi.n	80032f4 <UART_SetConfig+0x1b4>
 80032c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032c8:	d011      	beq.n	80032ee <UART_SetConfig+0x1ae>
 80032ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ce:	d811      	bhi.n	80032f4 <UART_SetConfig+0x1b4>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <UART_SetConfig+0x19c>
 80032d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d8:	d006      	beq.n	80032e8 <UART_SetConfig+0x1a8>
 80032da:	e00b      	b.n	80032f4 <UART_SetConfig+0x1b4>
 80032dc:	2300      	movs	r3, #0
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e037      	b.n	8003352 <UART_SetConfig+0x212>
 80032e2:	2302      	movs	r3, #2
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e034      	b.n	8003352 <UART_SetConfig+0x212>
 80032e8:	2304      	movs	r3, #4
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e031      	b.n	8003352 <UART_SetConfig+0x212>
 80032ee:	2308      	movs	r3, #8
 80032f0:	77fb      	strb	r3, [r7, #31]
 80032f2:	e02e      	b.n	8003352 <UART_SetConfig+0x212>
 80032f4:	2310      	movs	r3, #16
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e02b      	b.n	8003352 <UART_SetConfig+0x212>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a33      	ldr	r2, [pc, #204]	; (80033cc <UART_SetConfig+0x28c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d124      	bne.n	800334e <UART_SetConfig+0x20e>
 8003304:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <UART_SetConfig+0x27c>)
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800330c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003310:	d011      	beq.n	8003336 <UART_SetConfig+0x1f6>
 8003312:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003316:	d817      	bhi.n	8003348 <UART_SetConfig+0x208>
 8003318:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800331c:	d011      	beq.n	8003342 <UART_SetConfig+0x202>
 800331e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003322:	d811      	bhi.n	8003348 <UART_SetConfig+0x208>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <UART_SetConfig+0x1f0>
 8003328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800332c:	d006      	beq.n	800333c <UART_SetConfig+0x1fc>
 800332e:	e00b      	b.n	8003348 <UART_SetConfig+0x208>
 8003330:	2300      	movs	r3, #0
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e00d      	b.n	8003352 <UART_SetConfig+0x212>
 8003336:	2302      	movs	r3, #2
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e00a      	b.n	8003352 <UART_SetConfig+0x212>
 800333c:	2304      	movs	r3, #4
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e007      	b.n	8003352 <UART_SetConfig+0x212>
 8003342:	2308      	movs	r3, #8
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e004      	b.n	8003352 <UART_SetConfig+0x212>
 8003348:	2310      	movs	r3, #16
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e001      	b.n	8003352 <UART_SetConfig+0x212>
 800334e:	2310      	movs	r3, #16
 8003350:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800335a:	d16c      	bne.n	8003436 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800335c:	7ffb      	ldrb	r3, [r7, #31]
 800335e:	2b08      	cmp	r3, #8
 8003360:	d838      	bhi.n	80033d4 <UART_SetConfig+0x294>
 8003362:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <UART_SetConfig+0x228>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	0800338d 	.word	0x0800338d
 800336c:	08003395 	.word	0x08003395
 8003370:	0800339d 	.word	0x0800339d
 8003374:	080033d5 	.word	0x080033d5
 8003378:	080033a3 	.word	0x080033a3
 800337c:	080033d5 	.word	0x080033d5
 8003380:	080033d5 	.word	0x080033d5
 8003384:	080033d5 	.word	0x080033d5
 8003388:	080033ab 	.word	0x080033ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800338c:	f7ff f922 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8003390:	61b8      	str	r0, [r7, #24]
        break;
 8003392:	e024      	b.n	80033de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003394:	f7ff f940 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8003398:	61b8      	str	r0, [r7, #24]
        break;
 800339a:	e020      	b.n	80033de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <UART_SetConfig+0x290>)
 800339e:	61bb      	str	r3, [r7, #24]
        break;
 80033a0:	e01d      	b.n	80033de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a2:	f7ff f8a1 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 80033a6:	61b8      	str	r0, [r7, #24]
        break;
 80033a8:	e019      	b.n	80033de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ae:	61bb      	str	r3, [r7, #24]
        break;
 80033b0:	e015      	b.n	80033de <UART_SetConfig+0x29e>
 80033b2:	bf00      	nop
 80033b4:	efff69f3 	.word	0xefff69f3
 80033b8:	40013800 	.word	0x40013800
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40004400 	.word	0x40004400
 80033c4:	40004800 	.word	0x40004800
 80033c8:	40004c00 	.word	0x40004c00
 80033cc:	40005000 	.word	0x40005000
 80033d0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	77bb      	strb	r3, [r7, #30]
        break;
 80033dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d075      	beq.n	80034d0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	005a      	lsls	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	441a      	add	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b0f      	cmp	r3, #15
 8003400:	d916      	bls.n	8003430 <UART_SetConfig+0x2f0>
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003408:	d212      	bcs.n	8003430 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	b29b      	uxth	r3, r3
 800340e:	f023 030f 	bic.w	r3, r3, #15
 8003412:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	b29b      	uxth	r3, r3
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	b29a      	uxth	r2, r3
 8003420:	89fb      	ldrh	r3, [r7, #14]
 8003422:	4313      	orrs	r3, r2
 8003424:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	89fa      	ldrh	r2, [r7, #14]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	e04f      	b.n	80034d0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	77bb      	strb	r3, [r7, #30]
 8003434:	e04c      	b.n	80034d0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003436:	7ffb      	ldrb	r3, [r7, #31]
 8003438:	2b08      	cmp	r3, #8
 800343a:	d828      	bhi.n	800348e <UART_SetConfig+0x34e>
 800343c:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <UART_SetConfig+0x304>)
 800343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003442:	bf00      	nop
 8003444:	08003469 	.word	0x08003469
 8003448:	08003471 	.word	0x08003471
 800344c:	08003479 	.word	0x08003479
 8003450:	0800348f 	.word	0x0800348f
 8003454:	0800347f 	.word	0x0800347f
 8003458:	0800348f 	.word	0x0800348f
 800345c:	0800348f 	.word	0x0800348f
 8003460:	0800348f 	.word	0x0800348f
 8003464:	08003487 	.word	0x08003487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003468:	f7ff f8b4 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 800346c:	61b8      	str	r0, [r7, #24]
        break;
 800346e:	e013      	b.n	8003498 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003470:	f7ff f8d2 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8003474:	61b8      	str	r0, [r7, #24]
        break;
 8003476:	e00f      	b.n	8003498 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003478:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <UART_SetConfig+0x3a8>)
 800347a:	61bb      	str	r3, [r7, #24]
        break;
 800347c:	e00c      	b.n	8003498 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347e:	f7ff f833 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8003482:	61b8      	str	r0, [r7, #24]
        break;
 8003484:	e008      	b.n	8003498 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800348a:	61bb      	str	r3, [r7, #24]
        break;
 800348c:	e004      	b.n	8003498 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	77bb      	strb	r3, [r7, #30]
        break;
 8003496:	bf00      	nop
    }

    if (pclk != 0U)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d018      	beq.n	80034d0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	085a      	lsrs	r2, r3, #1
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	441a      	add	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b0f      	cmp	r3, #15
 80034b8:	d908      	bls.n	80034cc <UART_SetConfig+0x38c>
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c0:	d204      	bcs.n	80034cc <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	e001      	b.n	80034d0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80034dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	007a1200 	.word	0x007a1200

080034ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01a      	beq.n	8003602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ea:	d10a      	bne.n	8003602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  }
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af02      	add	r7, sp, #8
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003640:	f7fd f898 	bl	8000774 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b08      	cmp	r3, #8
 8003652:	d10e      	bne.n	8003672 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f82d 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e023      	b.n	80036ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b04      	cmp	r3, #4
 800367e:	d10e      	bne.n	800369e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f817 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e00d      	b.n	80036ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b09c      	sub	sp, #112	; 0x70
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d2:	e0a5      	b.n	8003820 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036da:	f000 80a1 	beq.w	8003820 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7fd f849 	bl	8000774 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80036ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d13e      	bne.n	8003772 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003708:	667b      	str	r3, [r7, #100]	; 0x64
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003714:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e6      	bne.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3308      	adds	r3, #8
 800372c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	663b      	str	r3, [r7, #96]	; 0x60
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3308      	adds	r3, #8
 8003744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003746:	64ba      	str	r2, [r7, #72]	; 0x48
 8003748:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800374c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e067      	b.n	8003842 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d04f      	beq.n	8003820 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378e:	d147      	bne.n	8003820 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003798:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e6      	bne.n	800379a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3308      	adds	r3, #8
 80037d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	613b      	str	r3, [r7, #16]
   return(result);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3308      	adds	r3, #8
 80037ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037ec:	623a      	str	r2, [r7, #32]
 80037ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	69f9      	ldr	r1, [r7, #28]
 80037f2:	6a3a      	ldr	r2, [r7, #32]
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e5      	bne.n	80037cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e010      	b.n	8003842 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	429a      	cmp	r2, r3
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	429a      	cmp	r2, r3
 800383c:	f43f af4a 	beq.w	80036d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3770      	adds	r7, #112	; 0x70
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b096      	sub	sp, #88	; 0x58
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	88fa      	ldrh	r2, [r7, #6]
 8003864:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2222      	movs	r2, #34	; 0x22
 8003874:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	2b00      	cmp	r3, #0
 800387c:	d02b      	beq.n	80038d6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a40      	ldr	r2, [pc, #256]	; (8003984 <UART_Start_Receive_DMA+0x138>)
 8003884:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a3f      	ldr	r2, [pc, #252]	; (8003988 <UART_Start_Receive_DMA+0x13c>)
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	4a3e      	ldr	r2, [pc, #248]	; (800398c <UART_Start_Receive_DMA+0x140>)
 8003894:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	2200      	movs	r2, #0
 800389c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3324      	adds	r3, #36	; 0x24
 80038a8:	4619      	mov	r1, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	461a      	mov	r2, r3
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	f7fd f8c3 	bl	8000a3c <HAL_DMA_Start_IT>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00c      	beq.n	80038d6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2210      	movs	r2, #16
 80038c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e051      	b.n	800397a <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f2:	657b      	str	r3, [r7, #84]	; 0x54
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80038fe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800390a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e6      	bne.n	80038de <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3308      	adds	r3, #8
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	e853 3f00 	ldrex	r3, [r3]
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	653b      	str	r3, [r7, #80]	; 0x50
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3308      	adds	r3, #8
 800392e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003930:	637a      	str	r2, [r7, #52]	; 0x34
 8003932:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003938:	e841 2300 	strex	r3, r2, [r1]
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e5      	bne.n	8003910 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3308      	adds	r3, #8
 800394a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	613b      	str	r3, [r7, #16]
   return(result);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800395a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003964:	623a      	str	r2, [r7, #32]
 8003966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	69f9      	ldr	r1, [r7, #28]
 800396a:	6a3a      	ldr	r2, [r7, #32]
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	61bb      	str	r3, [r7, #24]
   return(result);
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e5      	bne.n	8003944 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3758      	adds	r7, #88	; 0x58
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	08003aa3 	.word	0x08003aa3
 8003988:	08003bc1 	.word	0x08003bc1
 800398c:	08003bf9 	.word	0x08003bf9

08003990 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003990:	b480      	push	{r7}
 8003992:	b089      	sub	sp, #36	; 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	6979      	ldr	r1, [r7, #20]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	613b      	str	r3, [r7, #16]
   return(result);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e6      	bne.n	8003998 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	679a      	str	r2, [r3, #120]	; 0x78
}
 80039d0:	bf00      	nop
 80039d2:	3724      	adds	r7, #36	; 0x24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039dc:	b480      	push	{r7}
 80039de:	b095      	sub	sp, #84	; 0x54
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a02:	643b      	str	r3, [r7, #64]	; 0x40
 8003a04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e6      	bne.n	80039e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3308      	adds	r3, #8
 8003a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e5      	bne.n	8003a16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d118      	bne.n	8003a84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f023 0310 	bic.w	r3, r3, #16
 8003a66:	647b      	str	r3, [r7, #68]	; 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	6979      	ldr	r1, [r7, #20]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e6      	bne.n	8003a52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003a96:	bf00      	nop
 8003a98:	3754      	adds	r7, #84	; 0x54
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b09c      	sub	sp, #112	; 0x70
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d070      	beq.n	8003b9a <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8003ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ade:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ae0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ae4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e6      	bne.n	8003ac0 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3308      	adds	r3, #8
 8003af8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	667b      	str	r3, [r7, #100]	; 0x64
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b12:	647a      	str	r2, [r7, #68]	; 0x44
 8003b14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e5      	bne.n	8003af2 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	623b      	str	r3, [r7, #32]
   return(result);
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3308      	adds	r3, #8
 8003b44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b46:	633a      	str	r2, [r7, #48]	; 0x30
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e5      	bne.n	8003b26 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d118      	bne.n	8003b9a <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	e853 3f00 	ldrex	r3, [r3]
 8003b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f023 0310 	bic.w	r3, r3, #16
 8003b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	69b9      	ldr	r1, [r7, #24]
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	617b      	str	r3, [r7, #20]
   return(result);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e6      	bne.n	8003b68 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d107      	bne.n	8003bb2 <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003bac:	f7fc fb12 	bl	80001d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003bb0:	e002      	b.n	8003bb8 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8003bb2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003bb4:	f7ff faa6 	bl	8003104 <HAL_UART_RxCpltCallback>
}
 8003bb8:	bf00      	nop
 8003bba:	3770      	adds	r7, #112	; 0x70
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d109      	bne.n	8003bea <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	4619      	mov	r1, r3
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7fc faf6 	bl	80001d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003be8:	e002      	b.n	8003bf0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7ff fa94 	bl	8003118 <HAL_UART_RxHalfCpltCallback>
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b80      	cmp	r3, #128	; 0x80
 8003c1e:	d109      	bne.n	8003c34 <UART_DMAError+0x3c>
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	2b21      	cmp	r3, #33	; 0x21
 8003c24:	d106      	bne.n	8003c34 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003c2e:	6978      	ldr	r0, [r7, #20]
 8003c30:	f7ff feae 	bl	8003990 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d109      	bne.n	8003c56 <UART_DMAError+0x5e>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b22      	cmp	r3, #34	; 0x22
 8003c46:	d106      	bne.n	8003c56 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003c50:	6978      	ldr	r0, [r7, #20]
 8003c52:	f7ff fec3 	bl	80039dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c5c:	f043 0210 	orr.w	r2, r3, #16
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c66:	6978      	ldr	r0, [r7, #20]
 8003c68:	f7ff fa60 	bl	800312c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c6c:	bf00      	nop
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff fa4a 	bl	800312c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	6979      	ldr	r1, [r7, #20]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e6      	bne.n	8003ca8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fa02 	bl	80030f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cec:	bf00      	nop
 8003cee:	3720      	adds	r7, #32
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08c      	sub	sp, #48	; 0x30
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d14a      	bne.n	8003db4 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8003d24:	88fb      	ldrh	r3, [r7, #6]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e043      	b.n	8003db6 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e03c      	b.n	8003db6 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f7ff fd7b 	bl	800384c <UART_Start_Receive_DMA>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d124      	bne.n	8003dae <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d11d      	bne.n	8003da8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2210      	movs	r2, #16
 8003d72:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	617b      	str	r3, [r7, #20]
   return(result);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f043 0310 	orr.w	r3, r3, #16
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
 8003d94:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6a39      	ldr	r1, [r7, #32]
 8003d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e6      	bne.n	8003d74 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8003da6:	e002      	b.n	8003dae <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003db2:	e000      	b.n	8003db6 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3730      	adds	r7, #48	; 0x30
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <__libc_init_array>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	4d0d      	ldr	r5, [pc, #52]	; (8003df8 <__libc_init_array+0x38>)
 8003dc4:	4c0d      	ldr	r4, [pc, #52]	; (8003dfc <__libc_init_array+0x3c>)
 8003dc6:	1b64      	subs	r4, r4, r5
 8003dc8:	10a4      	asrs	r4, r4, #2
 8003dca:	2600      	movs	r6, #0
 8003dcc:	42a6      	cmp	r6, r4
 8003dce:	d109      	bne.n	8003de4 <__libc_init_array+0x24>
 8003dd0:	4d0b      	ldr	r5, [pc, #44]	; (8003e00 <__libc_init_array+0x40>)
 8003dd2:	4c0c      	ldr	r4, [pc, #48]	; (8003e04 <__libc_init_array+0x44>)
 8003dd4:	f000 f82e 	bl	8003e34 <_init>
 8003dd8:	1b64      	subs	r4, r4, r5
 8003dda:	10a4      	asrs	r4, r4, #2
 8003ddc:	2600      	movs	r6, #0
 8003dde:	42a6      	cmp	r6, r4
 8003de0:	d105      	bne.n	8003dee <__libc_init_array+0x2e>
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de8:	4798      	blx	r3
 8003dea:	3601      	adds	r6, #1
 8003dec:	e7ee      	b.n	8003dcc <__libc_init_array+0xc>
 8003dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df2:	4798      	blx	r3
 8003df4:	3601      	adds	r6, #1
 8003df6:	e7f2      	b.n	8003dde <__libc_init_array+0x1e>
 8003df8:	08003e84 	.word	0x08003e84
 8003dfc:	08003e84 	.word	0x08003e84
 8003e00:	08003e84 	.word	0x08003e84
 8003e04:	08003e88 	.word	0x08003e88

08003e08 <memcpy>:
 8003e08:	440a      	add	r2, r1
 8003e0a:	4291      	cmp	r1, r2
 8003e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e10:	d100      	bne.n	8003e14 <memcpy+0xc>
 8003e12:	4770      	bx	lr
 8003e14:	b510      	push	{r4, lr}
 8003e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e1e:	4291      	cmp	r1, r2
 8003e20:	d1f9      	bne.n	8003e16 <memcpy+0xe>
 8003e22:	bd10      	pop	{r4, pc}

08003e24 <memset>:
 8003e24:	4402      	add	r2, r0
 8003e26:	4603      	mov	r3, r0
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d100      	bne.n	8003e2e <memset+0xa>
 8003e2c:	4770      	bx	lr
 8003e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e32:	e7f9      	b.n	8003e28 <memset+0x4>

08003e34 <_init>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr

08003e40 <_fini>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr
